workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BEFORE_SHA !~ /0{40}/'
      changes:
        - "**/{*[^.]md*,*.[^m]*,*.m,*.m[^d]*,*.md?*,*[^d]}"
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_TAG'

default:
  interruptible: true
  tags:
    - docker

variables:
  CONTAINER_CLIENT_IMAGE: alpine:latest
  CONTAINER_GITLEAKS_IMAGE: zricethezav/gitleaks:latest
  CONTAINER_SEMGREP_IMAGE: returntocorp/semgrep:latest
  CONTAINER_ANSIBLE_IMAGE: $CI_REGISTRY/bigouden/alpine-ansible:daily
  CONTAINER_ANSIBLE_LATER_IMAGE: thegeeklab/ansible-later:latest
  CONTAINER_MEGA_LINTER_IMAGE: oxsecurity/megalinter:v7.8.0
  CONTAINER_KICS_IMAGE: checkmarx/kics:latest
  CONTAINER_TRIVY_IMAGE: aquasec/trivy:latest
  CONTAINER_OSV_SCANNER_IMAGE: ghcr.io/google/osv-scanner:latest
  CONTAINER_OWASP_DEPENDENCY_CHECK: owasp/dependency-check:latest
  TRIVY_NO_PROGRESS: "true"
  TRIVY_INSECURE: "true"
  TRIVY_EXIT_CODE: "1"
  TRIVY_SEVERITY: "CRITICAL"
  GIT_DEPTH: 1

Ansible Lint:
  stage: Quality
  needs: []
  image: 
    name: $CONTAINER_ANSIBLE_IMAGE
    entrypoint: ['']
  script:
    - ansible-lint
  variables:
    FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: "true"
  rules:
    - exists:
        - "**/ansible.cfg"
        - "**/hosts"
        - "**/.ansible-lint"
        - "**/.later.yml"

Ansible Later:
  stage: Quality
  needs: []
  image: 
    name: $CONTAINER_ANSIBLE_LATER_IMAGE
    entrypoint: ['']
  script:
    - ansible-later **/*.yml
  rules:
    - exists:
        - "**/ansible.cfg"
        - "**/hosts"
        - "**/.ansible-lint"
        - "**/.later.yml"

Mega-Linter:
  stage: Quality
  image: $CONTAINER_MEGA_LINTER_IMAGE
  script: 
    - 'true'
  variables:
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 day

Kics:
  stage: Security
  needs: []
  image: 
    name: $CONTAINER_KICS_IMAGE
    entrypoint: ['']
  script:
    - kics scan -p .
  rules:
    - exists:
        - "**/ansible.cfg"
        - "**/hosts"
        - "**/.ansible-lint"
        - "**/.later.yml"
        - "**/Dockerfile"

Trivy Configuration:
  stage: Security
  needs: []
  image:
    name: $CONTAINER_TRIVY_IMAGE
    entrypoint: ['']
  script:
    - trivy config .
  rules:
    - exists:
        - "**/Dockerfile"

OWASP Dependency Check:
  stage: Security
  needs: []
  image:
    name: $CONTAINER_OWASP_DEPENDENCY_CHECK
    entrypoint: [""]
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --project $CI_PROJECT_NAME --out . --scan . --enableExperimental --failOnCVSS 7 -d /tmp/cache/owasp-dependency-check --nvdApiKey $NVD_API_KEY
  artifacts:
    when: always
    paths:
      - dependency-check-report.html
    expire_in: 1 day
  variables:
    NVD_API_KEY: $NVD_API_KEY
    FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: "true"
  rules:
    - exists:
        - "**/*.py"

Trivy Repository:
  stage: Security
  needs: []
  image:
    name: $CONTAINER_TRIVY_IMAGE
    entrypoint: ['']
  script:
    - trivy repository --server "$TRIVY_SERVER_URL" --token "$TRIVY_SERVER_TOKEN" "$CI_REPOSITORY_URL"
  variables:
    TRIVY_SERVER_URL: "$TRIVY_SERVER_URL"
    TRIVY_SERVER_TOKEN: "$TRIVY_SERVER_TOKEN"

OSV Scanner:
  stage: Security
  needs: []
  image:
    name: $CONTAINER_OSV_SCANNER_IMAGE
    entrypoint: ['']
  before_script:
    - export PATH="${PATH}:/"
  dependencies: []
  script:
    - LOCK_FILE=$(find . -name pip_packages)
    - osv-scanner --lockfile=requirements.txt:${LOCK_FILE}
  rules:
    - exists:
        - "**/pip_packages"

Pylint:
  stage: Quality
  needs: []
  image: $CONTAINER_CLIENT_IMAGE
  before_script:
    - apk add --no-cache --update git py3-pip
    - pip install --break-system-packages pylint typing-extensions
  dependencies: []
  script:
    - find . -type f -name "*.py" | xargs pylint 
  rules:
    - exists:
        - "**/*.py"

Shellcheck:
  stage: Security
  needs: []
  image: $CONTAINER_CLIENT_IMAGE
  before_script:
    - apk add --no-cache --update shellcheck
  dependencies: []
  script:
    - find . -type f -name "*.sh" | xargs shellcheck 
  rules:
    - exists:
        - "**/*.sh"

Gitleaks:
  stage: Security
  needs: []
  image: 
    name: $CONTAINER_GITLEAKS_IMAGE
    entrypoint: [""]
  script:
    - gitleaks detect --source . -v
  variables:
    GIT_DEPTH: 0

Semgrep:
  stage: Security
  needs: []
  image: $CONTAINER_SEMGREP_IMAGE
  script: 
    - semgrep ci --config auto --force-color
