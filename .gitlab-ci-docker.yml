workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BEFORE_SHA !~ /0{40}/'
      changes:
        - "**/{*[^.]md*,*.[^m]*,*.m,*.m[^d]*,*.md?*,*[^d]}"
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_TAG'
      variables:
        CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-test
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

default:
  interruptible: true
  tags:
    - docker

variables:
  ANCHORE_IMAGE: anchore/inline-scan:latest
  CONTAINER_GRYPE_IMAGE:  $CI_REGISTRY/bigouden/alpine-grype:daily
  CONTAINER_PARANOIA_IMAGE: $CI_REGISTRY/bigouden/alpine-paranoia:daily
  CONTAINER_SYFT_IMAGE:  $CI_REGISTRY/bigouden/alpine-syft:daily
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-test
  CONTAINER_TRIVY_IMAGE: aquasec/trivy:latest
  CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_XEOL_IMAGE: noqcks/xeol:latest
  DIVE_IMAGE: wagoodman/dive:latest
  DOCKER_IMAGE: docker:latest
  HADOLINT_IMAGE: hadolint/hadolint:latest-debian
  GIT_DEPTH: 1
  DOCKER_BUILDKIT: 1

include:
  - project: 'Bigouden/gitlab-ci-templates'
    file: '.gitlab-ci-common.yml'

Hadolint:
  stage: Quality
  image: $HADOLINT_IMAGE
  script:
    - hadolint Dockerfile
  dependencies: []
  variables:
    CI_DEBUG_TRACE: "true"
  rules:
    - if: '$HADOLINT_ALLOW_FAILURE'
      allow_failure: true
    - exists:
        - "**/Dockerfile"

Facts:
  stage: Build
  image: $DOCKER_IMAGE
  before_script:
    - 'apk add --no-cache --update curl jq'
  script:
    - 'MR_BRANCH_LAST_COMMIT_SHA=$(curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA" | jq -r ".parent_ids  | .[-1]")'
    - 'echo MR_BRANCH_LAST_COMMIT_SHA: $MR_BRANCH_LAST_COMMIT_SHA'
    - 'MR_BRANCH_NAME=$(curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$MR_BRANCH_LAST_COMMIT_SHA/merge_requests" | jq -r ".[0].source_branch")'
    - 'echo "MR_BRANCH NAME: $MR_BRANCH_NAME"'
    - 'export COMMIT_BRANCH_NAME=$(curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA/refs?type=branch" |  jq -r ".[0].name")'
    - 'echo "COMMIT_BRANCH_NAME: $COMMIT_BRANCH_NAME"'
    - 'CONTAINER_REGISTRY_ID=$(curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories" | jq -r ".[0].id")'
    - 'echo "CONTAINER_REGISTRY_ID: $CONTAINER_REGISTRY_ID"'
    - 'echo "MR_BRANCH_NAME=$MR_BRANCH_NAME" >> facts.env'
    - 'echo "COMMIT_BRANCH_NAME=$COMMIT_BRANCH_NAME" >> facts.env'
    - 'echo "CONTAINER_REGISTRY_ID=$CONTAINER_REGISTRY_ID" >> facts.env'
  artifacts:
    reports:
      dotenv: facts.env            
  rules:
    - exists:
        - "**/Dockerfile"

# CUSTOM BRANCH
Dockerfile (custom_branch):
  stage: Build
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - 'echo "BUILD_MODE : CUSTOM BRANCH"'
    - 'echo "BUILD_ARGS : $DOCKER_BUILD_ARGS"'
    - 'echo "PULLING : $CONTAINER_TEST_IMAGE"'
    - 'docker pull $CONTAINER_TEST_IMAGE || true'
    - 'docker build $DOCKER_BUILD_ARGS $DOCKER_CUSTOM_BUILD_ARGS --pull -t $CONTAINER_TEST_IMAGE .'
    - 'echo "PUSHING : $CONTAINER_TEST_IMAGE"'
    - 'docker push $CONTAINER_TEST_IMAGE'
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null && $DOCKER_BUILD_NOCACHE == null'
      variables:
        DOCKER_BUILD_ARGS: "--cache-from $CONTAINER_TEST_IMAGE"
      exists:
        - "**/Dockerfile"
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null && $DOCKER_BUILD_NOCACHE'
      variables:
        DOCKER_BUILD_ARGS: "--no-cache"
      exists:
        - "**/Dockerfile"

# $CI_API_TOKEN (API read right) mandatory to retrieve MR branch name !
# DEFAULT BRANCH
Dockerfile (default_branch):
  stage: Build
  needs:
    - job: Facts
      optional: true
  image: $DOCKER_IMAGE
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  script:
    - 'echo "MR_BRANCH_NAME: $MR_BRANCH_NAME"'
    - 'echo "BUILD_MODE : DEFAULT BRANCH"'
    - 'echo "BUILD_ARGS : $DOCKER_BUILD_ARGS"'
    - 'echo "PULLING : $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME"'
    - 'docker pull $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME || true'
    - 'docker build $DOCKER_BUILD_ARGS $DOCKER_CUSTOM_BUILD_ARGS --pull -t $CONTAINER_TEST_IMAGE .'
    - 'echo "PUSHING : $CONTAINER_TEST_IMAGE"'
    - 'docker push $CONTAINER_TEST_IMAGE'
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $DOCKER_BUILD_NOCACHE == null'
      variables:
        DOCKER_BUILD_ARGS: "--cache-from $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME"
      exists:
        - "**/Dockerfile"
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $DOCKER_BUILD_NOCACHE'
      variables:
        DOCKER_BUILD_ARGS: "--no-cache"
      exists:
        - "**/Dockerfile"

# $CI_API_TOKEN (API read right) mandatory to retrieve MR branch name !
# TAG
Dockerfile (tag):
  stage: Build
  needs:
    - job: Facts
      optional: true
  image: $DOCKER_IMAGE
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  script:
    - 'test "$COMMIT_BRANCH_NAME" == "$CI_DEFAULT_BRANCH" && COMMIT_BRANCH_NAME="stable"'
    - 'echo "BUILD_MOE : TAG"'
    - 'echo "BUILD_ARGS : $DOCKER_BUILD_ARGS"'
    - 'echo "PULLING : $CI_REGISTRY_IMAGE:$COMMIT_BRANCH_NAME"'
    - 'docker pull $CI_REGISTRY_IMAGE:$COMMIT_BRANCH_NAME || true'
    - 'docker build $DOCKER_BUILD_ARGS $DOCKER_CUSTOM_BUILD_ARGS --pull -t $CONTAINER_TEST_IMAGE .'
    - 'echo "PUSHING : $CONTAINER_TEST_IMAGE"'
    - 'docker push $CONDTAINER_TEST_IMAGE'
  retry: 2
  rules:
    - if: '$CI_COMMIT_TAG && $DOCKER_BUILD_NOCACHE == null'
      variables:
        DOCKER_BUILD_ARGS: "--cache-from $CI_REGISTRY_IMAGE:$COMMIT_BRANCH_NAME"
      exists:
        - "**/Dockerfile"
    - if: '$CI_COMMIT_TAG && $DOCKER_BUILD_NOCACHE'
      variables:
        DOCKER_BUILD_ARGS: "--no-cache"
      exists:
        - "**/Dockerfile"

RootFS:
  stage: Build
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
    - 'apk add --update curl tar'
  image: $DOCKER_IMAGE
  script:
    - './build.sh'
    - 'docker tag $CI_PROJECT_NAME $CONTAINER_TEST_IMAGE'
    - 'echo "PUSHING : $CONTAINER_TEST_IMAGE"'
    - 'docker push $CONTAINER_TEST_IMAGE'
  dependencies: []
  retry: 2
  rules:
    - exists:
      - "**/build.sh"

Dive:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  image: 
    name: $DIVE_IMAGE
    entrypoint: [""]
  script:
    - 'docker pull $CONTAINER_TEST_IMAGE'
    - 'dive $CONTAINER_TEST_IMAGE'
  dependencies: []
  retry: 2
  variables:
    CI: "true"

Anchore:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image: 
    name: $ANCHORE_IMAGE
  services:
    - name: $ANCHORE_IMAGE
      alias: anchore-engine
      command: ["start"]
  script:
    - 'anchore-cli system wait'
    - 'anchore-cli registry add "$CI_REGISTRY" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASSWORD" --skip-validate'
    - 'anchore-cli image add "$CONTAINER_TEST_IMAGE"'
    - 'anchore-cli image wait "$CONTAINER_TEST_IMAGE"'
    - 'anchore-cli evaluate check --detail "$CONTAINER_TEST_IMAGE"'
  allow_failure: true
  variables:
    ANCHORE_CLI_URL: "http://anchore-engine:8228/v1"
    GIT_STRATEGY: none
  dependencies: []
  when: manual

Trivy Image:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image:
    name: $CONTAINER_TRIVY_IMAGE
    entrypoint: ['']
  before_script:
    - 'trivy image --download-db-only'
  script:
    - 'trivy image "$CONTAINER_TEST_IMAGE"'
  allow_failure: true
  variables:
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_INSECURE: "true"
    TRIVY_EXIT_CODE: "1"
    TRIVY_SEVERITY: "CRITICAL"
    GIT_STRATEGY: none

Xeol:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image:
    name: $CONTAINER_XEOL_IMAGE
    entrypoint: ['']
  script:
    - '/xeol docker:"$CONTAINER_TEST_IMAGE" --fail-on-eol-found'
  variables:
    GIT_STRATEGY: none

Grype:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image:
    name: $CONTAINER_GRYPE_IMAGE
    entrypoint: ['']
  before_script:
    - 'grype db update'
  script:
    - 'grype --scope all-layers "$CONTAINER_TEST_IMAGE"'
  allow_failure: true
  variables:
    GRYPE_FAIL_ON_SEVERITY: "critical"
    GRYPE_REGISTRY_AUTH_USERNAME: "$CI_REGISTRY_USER"
    GRYPE_REGISTRY_AUTH_PASSWORD: "$CI_REGISTRY_PASSWORD"
    GRYPE_REGISTRY_AUTH_AUTHORITY: "$CI_REGISTRY"
    GRYPE_REGISTRY_INSECURE_SKIP_TLS_VERIFY: "true"
    GIT_STRATEGY: none
  rules:
    - if: '$CI_PROJECT_NAME == "alpine-grype"'
      when: never
    - when: on_success

Syft:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image:
    name: $CONTAINER_SYFT_IMAGE
    entrypoint: ['']
  script:
    - 'syft packages --scope all-layers "$CONTAINER_TEST_IMAGE"'
  allow_failure: true
  variables:
    SYFT_REGISTRY_AUTH_USERNAME: "$CI_REGISTRY_USER"
    SYFT_REGISTRY_AUTH_PASSWORD: "$CI_REGISTRY_PASSWORD"
    SYFT_REGISTRY_AUTH_AUTHORITY: "$CI_REGISTRY"
    SYFT_REGISTRY_INSECURE_SKIP_TLS_VERIFY: "true"
    GIT_STRATEGY: none
  rules:
    - if: '$CI_PROJECT_NAME == "alpine-syft"'
      when: never
    - when: on_success

Paranoia:
  stage: Inspect
  needs:
    - job: Dockerfile (custom_branch)
      optional: true
    - job: Dockerfile (default_branch)
      optional: true
    - job: Dockerfile (tag)
      optional: true
  image:
    name: $CONTAINER_PARANOIA_IMAGE
    entrypoint: ['']
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  script:
    - 'paranoia inspect "$CONTAINER_TEST_IMAGE"'
  allow_failure: true
  variables:
    DOCKER_HOST: $DOCKER_HOST
    GIT_STRATEGY: none
  rules:
    - if: '$CI_PROJECT_NAME == "alpine-paranoia"'
      when: never
    - when: on_success

Gitlab:
  stage: Release
  image: $DOCKER_IMAGE
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  script:
    - 'echo "PULLING: $CONTAINER_TEST_IMAGE"'
    - 'docker pull $CONTAINER_TEST_IMAGE'
    - 'echo "TAGGING: $CONTAINER_TEST_IMAGE -> $CONTAINER_VERSION_IMAGE"'
    - 'docker tag $CONTAINER_TEST_IMAGE $CONTAINER_VERSION_IMAGE'
    - 'echo "PUSHING: $CONTAINER_VERSION_IMAGE"'
    - 'docker push $CONTAINER_VERSION_IMAGE'
  variables:
    GIT_STRATEGY: none
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE =~ /push|web|pipeline/'
      variables:
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:stable
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "schedule"'
      variables:
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
    - if: '$CI_COMMIT_TAG'
      variables:
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - when: on_success

DockerHub:
  stage: Release
  image: $DOCKER_IMAGE
  before_script:
    - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
    - 'docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD'
  script:
    - 'echo "PULLING: $CONTAINER_TEST_IMAGE"'
    - 'docker pull $CONTAINER_TEST_IMAGE'
    - 'echo "TAGGING: $CONTAINER_TEST_IMAGE -> $DOCKER_HUB_VERSION_IMAGE"'
    - 'docker tag $CONTAINER_TEST_IMAGE $DOCKER_HUB_VERSION_IMAGE'
    - 'echo "PUSHING: $DOCKER_HUB_VERSION_IMAGE"'
    - 'docker push $DOCKER_HUB_VERSION_IMAGE'
  variables:
    GIT_STRATEGY: none
  dependencies: []
  retry: 2
  rules:
    - if: '$DOCKER_HUB_USER && $DOCKER_HUB_PASSWORD && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web")'
      variables:
        DOCKER_HUB_VERSION_IMAGE: $DOCKER_HUB_USER/$CI_PROJECT_NAME:stable
    - if: '$DOCKER_HUB_USER && $DOCKER_HUB_PASSWORD && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "schedule"'
      variables:
        DOCKER_HUB_VERSION_IMAGE: $DOCKER_HUB_USER/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG
    - if: '$DOCKER_HUB_USER && $DOCKER_HUB_PASSWORD && $CI_COMMIT_TAG'
      variables:
        DOCKER_HUB_VERSION_IMAGE: $DOCKER_HUB_USER/$CI_PROJECT_NAME:$CI_COMMIT_TAG

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
# CLEAN CUSTOM BRANCH
Gitlab Container Registry (custom_branch):
  stage: Clean
  needs:
    - job: Gitlab
    - job: DockerHub
      optional: true
    - job: Facts
      optional: true
  image: $DOCKER_IMAGE
  before_script:
    - 'apk add --no-cache --update curl jq'
  script:
    - 'echo "CLEAN_MODE : CUSTOM_BRANCH"'
    - 'echo "CONTAINER_REGISTRY_ID: $CONTAINER_REGISTRY_ID"'
    - 'echo "DELETING: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-test"'
    - 'curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$CI_COMMIT_REF_NAME-test"'
  variables:
    GIT_STRATEGY: none
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null'

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
# CLEAN DEFAULT BRANCH
Gitlab Container Registry (default_branch):
  stage: Clean
  needs:
    - job: Gitlab
    - job: DockerHub
      optional: true
    - job: Facts
      optional: true
  image: $DOCKER_IMAGE
  before_script:
    - apk add --no-cache --update curl jq
  script:
    - 'echo "CLEAN_MODE : DEFAULT BRANCH"'
    - 'echo "CONTAINER_REGISTRY_ID: $CONTAINER_REGISTRY_ID"'
    - 'echo "MR_BRANCH_NAME: $MR_BRANCH_NAME"'
    - 'echo "DELETING: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-test"'
    - 'curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$CI_COMMIT_REF_NAME-test"'
    - 'echo "DELETING: $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME"'
    - 'curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$MR_BRANCH_NAME"'
  variables:
    GIT_STRATEGY: none
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
# CLEAN TAG
Gitlab Container Registry (tag):
  stage: Clean
  needs:
    - job: Gitlab
    - job: DockerHub
      optional: true
    - job: Facts
      optional: true
  image: $DOCKER_IMAGE
  before_script:
    - 'apk add --no-cache --update curl jq'
  script:
    - 'echo "CLEAN_MODE : TAG"'
    - 'echo "CONTAINER_REGISTRY_ID: $CONTAINER_REGISTRY_ID"'
    - 'echo "DELETING: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-test"'
    - 'curl -k -s --header "PRIVATE-TOKEN: $CI_API_TOKEN" --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$CI_COMMIT_TAG-test"'
  variables:
    GIT_STRATEGY: none
  retry: 2
  rules:
    - if: '$CI_COMMIT_TAG'
