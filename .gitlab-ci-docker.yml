workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID

image: docker:latest
services:
  - docker:dind

stages:
  - Quality
  - Build
  - Inspect
  - Security
  - Release
  
variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:test
  CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest

Hadolint:
  stage: Quality
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint --ignore DL3013 --ignore DL3018 Dockerfile

Build:
  stage: Build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - apk add bash curl 
    - curl -s https://ci-tools.anchore.io/inline_scan-v0.3.3 | bash -s -- -r -t 500 "$CONTAINER_TEST_IMAGE"
    - docker push $CONTAINER_TEST_IMAGE
    - |
      echo "Parsing Anchore reports."
      apk add jq
      bash <<'EOF'
      for f in anchore-reports/*; do
        if [[ "$f" =~ "content-os" ]]; then
          printf "\n%s\n" "The following OS packages are installed on $CONTAINER_TEST_IMAGE :"
          jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' $f || true
        fi
        if [[ "$f" =~ "vuln" ]]; then
          printf "\n%s\n" "The following vulnerabilities were found on $CONTAINER_TEST_IMAGE :"
          jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' $f || true
        fi
      done
      EOF
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
    - anchore-reports/*
    
Dive:
  stage: Inspect
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run -v /var/run/docker.sock:/var/run/docker.sock:ro wagoodman/dive $CONTAINER_TEST_IMAGE --ci

Anchore:
  stage: Security
  image: docker.io/anchore/inline-scan:latest
  services:
    - name: anchore/inline-scan:latest
      alias: anchore-engine
      command: ["start"]
  script:
    - anchore-cli system wait
    - anchore-cli registry add "$CI_REGISTRY" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASSWORD" --skip-validate 
    - anchore_ci_tools.py -a -r -f --timeout 500 --image $CI_REGISTRY_IMAGE:test
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
      - anchore-reports/*
  variables:
    ANCHORE_CLI_URL: "http://anchore-engine:8228/v1"
    GIT_STRATEGY: none

Release:
  stage: Release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_VERSION_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_VERSION_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE
  variables:
    GIT_STRATEGY: none
  when: manual