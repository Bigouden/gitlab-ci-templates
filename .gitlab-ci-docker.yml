workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BEFORE_SHA !~ /0{40}/'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_TAG'

default:
  interruptible: true
  tags:
    - docker

variables:
  ANCHORE_IMAGE: anchore/inline-scan:latest
  CONTAINER_CLIENT_IMAGE: alpine:latest
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-test
  CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  DIVE_IMAGE: wagoodman/dive:latest
  DOCKER_IMAGE: docker:latest
  HADOLINT_IMAGE: hadolint/hadolint:latest-debian
  GIT_DEPTH: 10

Pylint:
  stage: Quality
  image: $CONTAINER_CLIENT_IMAGE
  before_script:
    - apk add --no-cache --update git py3-pip
    - pip install pylint
  dependencies: []
  script:
    - find . -type f -name "*.py" | xargs pylint 
  rules:
    - exists:
        - "*.py"

Hadolint:
  stage: Quality
  image: $HADOLINT_IMAGE
  script:
    - hadolint --ignore DL3013 --ignore DL3018 Dockerfile
  dependencies: []
  variables:
    CI_DEBUG_TRACE: "true"
  rules:
    - exists:
        - Dockerfile

Dockerfile (custom_branch):
  stage: Build
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TEST_IMAGE || true
    - docker build --cache-from $CONTAINER_TEST_IMAGE --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null'
      exists:
        - Dockerfile

# $CI_API_TOKEN (API read right) mandatory to retrieve MR branch name !
Dockerfile (default_branch):
  stage: Build
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache --update curl jq
  script:
    - MR_BRANCH_LAST_COMMIT_SHA=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA?private_token=$CI_API_TOKEN" | jq -r '.parent_ids | del(.[] | select(. == "'$CI_COMMIT_BEFORE_SHA'")) | .[-1]')
    - MR_BRANCH_NAME=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$MR_BRANCH_LAST_COMMIT_SHA/merge_requests?private_token=$CI_API_TOKEN" | jq -r '.[0].source_branch')
    - echo "MERGE REQUEST BRANCH NAME = $MR_BRANCH_NAME"
    - docker pull $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$MR_BRANCH_NAME --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      exists:
        - Dockerfile

# $CI_API_TOKEN (API read right) mandatory to retrieve MR branch name !
Dockerfile (tag):
  stage: Build
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache --update curl jq
  script:
    - LAST_COMMIT_SHA=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA?private_token=$CI_API_TOKEN" | jq -r '.parent_ids | del(.[] | select(. == "'$CI_COMMIT_BEFORE_SHA'")) | .[-1]')
    - BRANCH_NAME=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/LAST_COMMIT_SHA/refs?type=branch?private_token=$CI_API_TOKEN" | jq -r '.[0].name')
    - echo "BRANCH NAME = $BRANCH_NAME"
    - test "$BRANCH_NAME" == "master" && BRANCH_NAME="stable"
    - docker pull $CI_REGISTRY_IMAGE:BRANCH_NAME || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$BRANCH_NAME --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-test
      exists:
        - Dockerfile

RootFS:
  stage: Build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update curl tar
  image: $DOCKER_IMAGE
  script:
    - ./build.sh
    - docker tag $CI_PROJECT_NAME $CONTAINER_TEST_IMAGE
    - docker push $CONTAINER_TEST_IMAGE
  dependencies: []
  retry: 2
  rules:
    - exists:
      - build.sh

Dive:
  stage: Inspect
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  image: 
    name: $DIVE_IMAGE
    entrypoint: [""]
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - dive $CONTAINER_TEST_IMAGE
  dependencies: []
  variables:
    CI: "true"

Anchore:
  stage: Inspect
  image: 
    name: $ANCHORE_IMAGE
  services:
    - name: $ANCHORE_IMAGE
      alias: anchore-engine
      command: ["start"]
  script:
    - anchore-cli system wait
    - anchore-cli registry add "$CI_REGISTRY" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASSWORD" --skip-validate
    - anchore-cli image add "$CONTAINER_TEST_IMAGE"
    - anchore-cli image wait "$CONTAINER_TEST_IMAGE"
    - anchore-cli evaluate check --detail "$CONTAINER_TEST_IMAGE"
  allow_failure: true
  variables:
    ANCHORE_CLI_URL: "http://anchore-engine:8228/v1"
    GIT_STRATEGY: none
  dependencies: []
  when: manual

Gitlab:
  stage: Release
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_VERSION_IMAGE
    - docker push $CONTAINER_VERSION_IMAGE
  variables:
    GIT_STRATEGY: none
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:stable
    - if: '$CI_COMMIT_TAG'
      variables:
        CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMiT_TAG-test
        CONTAINER_VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMiT_TAG
    - when: on_success

DockerHub:
  stage: Release
  image: $DOCKER_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $DOCKER_HUB_VERSION_IMAGE
    - docker push $DOCKER_HUB_VERSION_IMAGE
  variables:
    GIT_STRATEGY: none
  dependencies: []
  rules:
    - if: $DOCKER_HUB_USER && $DOCKER_HUB_PASSWORD && '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        DOCKER_HUB_VERSION_IMAGE: $DOCKER_HUB_USER/$CI_PROJECT_NAME:stable

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
Gitlab Container Registry (custom branch):
  stage: Clean
  image: $DOCKER_IMAGE
  before_script:
    - apk add --no-cache --update curl jq
  script:
    - CONTAINER_REGISTRY_ID=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories?private_token=$CI_API_TOKEN" | jq -r '.[0].id')
    - curl -k -s --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$CI_COMMIT_REF_NAME-test?private_token=$CI_API_TOKEN"
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null'

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
Gitlab Container Registry (default branch):
  stage: Clean
  image: $DOCKER_IMAGE
  before_script:
    - apk add --no-cache --update curl jq
  script:
    - CONTAINER_REGISTRY_ID=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories?private_token=$CI_API_TOKEN" | jq -r '.[0].id')
    - MR_BRANCH_LAST_COMMIT_SHA=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA?private_token=$CI_API_TOKEN" | jq -r '.parent_ids | del(.[] | select(. == "'$CI_COMMIT_BEFORE_SHA'")) | .[-1]')
    - MR_BRANCH_NAME=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$MR_BRANCH_LAST_COMMIT_SHA/merge_requests?private_token=$CI_API_TOKEN" | jq -r '.[0].source_branch')
    - echo "MERGE REQUEST BRANCH NAME = $MR_BRANCH_NAME"
    - curl -k -s --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$CI_COMMIT_REF_NAME-test?private_token=$CI_API_TOKEN"
    - curl -k -s --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/$MR_BRANCH_NAME?private_token=$CI_API_TOKEN"
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# $CI_API_TOKEN (API write right) mandatory to delete container registry tag !
Gitlab Container Registry (tag):
  stage: Clean
  image: $DOCKER_IMAGE
  before_script:
    - apk add --no-cache --update curl jq
  script:
    - CONTAINER_REGISTRY_ID=$(curl -k -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories?private_token=$CI_API_TOKEN" | jq -r '.[0].id')
    - curl -k -s --request DELETE "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$CONTAINER_REGISTRY_ID/tags/CI_COMMIT_TAG-test?private_token=$CI_API_TOKEN"
  dependencies: []
  retry: 2
  rules:
    - if: '$CI_COMMIT_TAG'
